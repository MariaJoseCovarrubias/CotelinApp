[{"/Users/cotelina/Desktop/CotelinApp/src/index.jsx":"1","/Users/cotelina/Desktop/CotelinApp/src/App.jsx":"2","/Users/cotelina/Desktop/CotelinApp/src/Routes.jsx":"3","/Users/cotelina/Desktop/CotelinApp/src/Navbar.jsx":"4","/Users/cotelina/Desktop/CotelinApp/src/Mapa.jsx":"5","/Users/cotelina/Desktop/CotelinApp/src/Chat.jsx":"6"},{"size":467,"mtime":1681421266978,"results":"7","hashOfConfig":"8"},{"size":343,"mtime":1681426361369,"results":"9","hashOfConfig":"8"},{"size":427,"mtime":1681677660650,"results":"10","hashOfConfig":"8"},{"size":579,"mtime":1681679700133,"results":"11","hashOfConfig":"8"},{"size":4326,"mtime":1681677505477,"results":"12","hashOfConfig":"8"},{"size":5526,"mtime":1681678924292,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"nx5x1r",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"17"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cotelina/Desktop/CotelinApp/src/index.jsx",[],[],[],"/Users/cotelina/Desktop/CotelinApp/src/App.jsx",[],[],"/Users/cotelina/Desktop/CotelinApp/src/Routes.jsx",[],[],"/Users/cotelina/Desktop/CotelinApp/src/Navbar.jsx",[],[],"/Users/cotelina/Desktop/CotelinApp/src/Mapa.jsx",["34"],[],"import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\nlet email = \"mcovarrubias@uc.cl\";\nlet password = \"18640729\";\nconst infopay = {\n  \"type\": \"JOIN\",\n  \"payload\": {\n    \"authorization\": `Basic ${btoa(`${email}:${password}`)}`\n  }\n}\nconst redIcon = new L.Icon({\n    iconUrl:\n      'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n    shadowUrl:\n      'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34],\n    shadowSize: [41, 41],\n  });\n\nconst pinkIcon = new L.Icon({\n    iconUrl:\n      'https://www.clker.com/cliparts/d/3/R/P/q/e/hot-pink-home-icon-hi.png',\n    iconSize: [25, 25],\n    iconAnchor: [12, 25],\n    popupAnchor: [1, -34],\n    shadowSize: [41, 41],\n  });\n\nconst motoIcon = new L.Icon({\n    iconUrl:\n      'https://w7.pngwing.com/pngs/491/336/png-transparent-scooter-vespa-motorcycle-scooter-scooter-motorcycle-piaggio.png',\n    iconSize: [25, 25],\n    iconAnchor: [12, 25],\n    popupAnchor: [1, -34],\n    shadowSize: [41, 41],\n  });\n\nfunction Mapa() {\n    const [restaurants, setRestaurants] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const [destinations, setDestinations] = useState([]);\n    const [delivery, setDelivery] = useState([]);\n    const [position, setPosition] = useState([]);\n    const [users, setUsers] = useState([]);\n\n\n  useEffect(() => {\n    // Initialize the UI.\n    \n    const socket = new WebSocket(\"wss://tarea2-2023-1-dev-z2fqxmm2ja-uc.a.run.app/connect\"); // replace with your server's URL\n    socket.onopen = () => {\n      console.log('WebSocket connection established.');\n      socket.send(JSON.stringify(infopay));\n      socket.addEventListener(\"message\", ({ data })=> {\n        const event = JSON.parse(data);\n        console.log(event);\n        \n        if (event.type === \"RESTAURANTS\") {\n          setRestaurants(event.payload);\n          \n        } else if (event.type === \"DESTINATIONS\") {\n          setDestinations(event.payload);\n        } else if (event.type === \"DELIVERIES\") {\n          setDelivery(event.payload);\n        } else if (event.type === \"POSITION\") {\n          setPosition(event.payload);\n        } else if (event.type === \"USERS\") {\n            setUsers(event.payload);\n            }\n      });\n    };\n\n    socket.onmessage = (event) => {\n        setMessages([...messages, event.data]);\n      };\n  \n      socket.onclose = () => {\n        console.log(\"WebSocket closed\");\n      };\n  \n      socket.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n  \n      return () => {\n        socket.close();\n      };\n  }, []); // empty dependency array ensures this effect only runs once\n\n  return (\n    <MapContainer center={[-33.35, -70.5]} zoom={13} scrollWheelZoom={true} style={{ height: '600px' }}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\n      {restaurants.map((restaurant) => (\n  // Check if latitude and longitude values are defined before creating marker\n  (restaurant.position.lat && restaurant.position.long) &&\n  <Marker key={restaurant.id} position={[restaurant.position.lat, restaurant.position.long]} icon={redIcon}>\n    <Popup>\n      <h3>{restaurant.name}</h3>\n    </Popup>\n  </Marker>\n))}\n{delivery.map((deli) => (\n    users.map((user) => (\n        // Check if latitude and longitude values are defined before creating marker\n        position.position.lat && position.position.long && position.delivery_id === deli.id && user.id === deli.user_id &&\n        <Marker key={deli.id} position={[position.position.lat, position.position.long]}  icon={motoIcon}>\n          <Popup>\n            <h3>{user.name}</h3>\n          </Popup>\n        </Marker>\n      ))\n))}\n\n\n{destinations.map((destination) => (\n  // Check if latitude and longitude values are defined before creating marker\n  (destination.position.lat && destination.position.long) &&\n  <Marker key={destination.id} position={[destination.position.lat, destination.position.long]}  icon={pinkIcon}>\n    <Popup>\n      <h3>{destination.name}</h3>\n    </Popup>\n  </Marker>\n))}\n    </MapContainer>\n\n\n  );\n}\n\nexport default Mapa;\n","/Users/cotelina/Desktop/CotelinApp/src/Chat.jsx",[],[],{"ruleId":"35","severity":1,"message":"36","line":93,"column":6,"nodeType":"37","endLine":93,"endColumn":8,"suggestions":"38"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.","ArrayExpression",["39"],{"desc":"40","fix":"41"},"Update the dependencies array to be: [messages]",{"range":"42","text":"43"},[2816,2818],"[messages]"]